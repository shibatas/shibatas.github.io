<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-09-08T01:20:01+00:00</updated><id>/feed.xml</id><title type="html">Shohei Shibata</title><subtitle>Personal website for Shohei Shibata, a freelance web developer. A blog describing his learning experiences in coding.</subtitle><entry><title type="html">Navigating between files in Vim</title><link href="/web-development/2019/12/15/vim-navigation.html" rel="alternate" type="text/html" title="Navigating between files in Vim" /><published>2019-12-15T00:00:00+00:00</published><updated>2019-12-15T00:00:00+00:00</updated><id>/web-development/2019/12/15/vim-navigation</id><content type="html" xml:base="/web-development/2019/12/15/vim-navigation.html">&lt;p&gt;When I chose to start using Vim instead of GUI-based editors, I figured one drawback was going to be navigating between multiple files, or working on multiple files at once. Well I was wrong. It’s very easy to work with multiple files in Vim, and it’s pretty awesome to be able to navigate files quickly without a mouse!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here are some basic commands I’ve learned to help me navigate my way through multiple files in Vim.&lt;/p&gt;

&lt;h2 id=&quot;the-jump-list&quot;&gt;The Jump List&lt;/h2&gt;

&lt;p&gt;Each time you open a new file or jump to a new location within the same file, Vim records the locations in the “Jump List”. The jump list can be viewed by the command &lt;code class=&quot;highlighter-rouge&quot;&gt;:jump&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-12-15-navigating-between-files-in-vim/jumplist.png&quot; alt=&quot;Jump List&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;The jump list&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can quickly go to any of those locations by hitting &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + o&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + i&lt;/code&gt; in normal mode. &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + o&lt;/code&gt; takes you to the previous location in the jump history (e.g. last file you opened), and &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + i&lt;/code&gt; takes you forward in the jump history.&lt;/p&gt;

&lt;p&gt;If you have just a few files open, this is definitely the fastest way to flip through the files.&lt;/p&gt;

&lt;h2 id=&quot;the-buffer&quot;&gt;The Buffer&lt;/h2&gt;

&lt;p&gt;Each loaded file is stored as a buffer in Vim. To view what files you have loaded, use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;:ls&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-12-15-navigating-between-files-in-vim/bufferslist.png&quot; alt=&quot;Buffers List&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;The buffers list&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can see that each line starts with a number. That’s the buffer number for that file. To go to open buffer 1, type &lt;code class=&quot;highlighter-rouge&quot;&gt;:b1&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h2 id=&quot;split-view&quot;&gt;Split View&lt;/h2&gt;

&lt;p&gt;One thing I love about Vim is the uncluttered view, with the only thing in front of me being the one text file I am editing. However sometimes it is much better to have two files side-by-side. When I am writing a test, for example, it’s nice to be able to view the code that I am trying to test. The split screen view is perfect for this.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-12-15-navigating-between-files-in-vim/splitview.png&quot; alt=&quot;Split View&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;The split view&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Instead of opening a new file by the &lt;code class=&quot;highlighter-rouge&quot;&gt;:e &amp;lt;filename&amp;gt;&lt;/code&gt; command, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;:vsp &amp;lt;filename&amp;gt;&lt;/code&gt; to open the new file in a split screen to the side, or &lt;code class=&quot;highlighter-rouge&quot;&gt;:sp&lt;/code&gt; to add a split screen below. To move the cursor between the open files, use &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + w w&lt;/code&gt;. To close a split window, go to that window and type &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tab-view&quot;&gt;Tab View&lt;/h2&gt;

&lt;p&gt;You can also open files in tabs. &lt;code class=&quot;highlighter-rouge&quot;&gt;:tabnew &amp;lt;filename&amp;gt;&lt;/code&gt; will open a new file in a new tab. &lt;code class=&quot;highlighter-rouge&quot;&gt;:tabn1&lt;/code&gt; will take you to the first tab, &lt;code class=&quot;highlighter-rouge&quot;&gt;:tabn2&lt;/code&gt; for the second tab, and so on. You can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;:tabn&lt;/code&gt; to go to the next tab, and &lt;code class=&quot;highlighter-rouge&quot;&gt;:tabp&lt;/code&gt; for the previous tab.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-12-15-navigating-between-files-in-vim/tabview.png&quot; alt=&quot;Tab View&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;The tab view&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Personally, I find that the other three commands (jump, buffer, split) are sufficient for me in most any situation. One unique thing about the tab view though, is that you are basically creating a new instance of Vim in each tab. If that is what you need then the tab view is what you want to use.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;By getting familiar with these commands, it’s possible to efficiently work with multiple files in Vim. Over time, you can develop your way of using these commands, and possibly also create some custom &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; keybindings to make you even faster.&lt;/p&gt;</content><author><name></name></author><category term="Vim" /><summary type="html">When I chose to start using Vim instead of GUI-based editors, I figured one drawback was going to be navigating between multiple files, or working on multiple files at once. Well I was wrong. It’s very easy to work with multiple files in Vim, and it’s pretty awesome to be able to navigate files quickly without a mouse!</summary></entry><entry><title type="html">Why I use VIM</title><link href="/web-development/2019/11/11/why-i-use-vim.html" rel="alternate" type="text/html" title="Why I use VIM" /><published>2019-11-11T14:25:11+00:00</published><updated>2019-11-11T14:25:11+00:00</updated><id>/web-development/2019/11/11/why-i-use-vim</id><content type="html" xml:base="/web-development/2019/11/11/why-i-use-vim.html">&lt;p&gt;Why would anyone want to use VIM? The text editor is the place where a web developer spends most of his or her time, and so we definitely want it to be efficient and stress-free. And there are a lot of great options out there, so why would anyone want to choose the most primitive, barebones looking option? &lt;!--more--&gt;&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-11-11-why-i-use-vim/vim.png&quot; alt=&quot;VIM&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;VIM startup screen&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;VIM lacks any graphical interface. I imagine many people might not even know how to exit out of the thing if opening a file in VIM by accident! Each action is performed by typing in commands which you must memorize, and I can totally see how that can scare off a lot of people!&lt;/p&gt;

&lt;p&gt;However if you are patient and spend the time to learn how to use VIM, you will be hugely rewarded. The speed and efficiency of keyboard-based navigation makes me very productive. I love the simplicity of having only the text file that I am editing. I think that promotes better focus. Also, it’s a tremendously satisfying feeling to learn the language of VIM, because as you use it more, you will learn more commands which continuously improves your efficiency even more.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-commands&quot;&gt;The basic commands&lt;/h2&gt;

&lt;p&gt;OK, so even though you might hear a lot about the steep learning curve of VIM, I think it’s actually not that bad. It’s a lot like learning a new language. It will take years and years to learn all the words in any language, but you only need to learn a tiny fraction of the to get by in 90% of situations you will face. With VIM, you can also start simple by just learning a few commands, like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h j k l&lt;/code&gt; keys will move the cursor left, down, up, right, respectively.&lt;/li&gt;
  &lt;li&gt;Typing &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; will get you in insert mode. This let’s you type.&lt;/li&gt;
  &lt;li&gt;Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt; to get out of insert mode.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt; and Enter will save the file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt; exits you out of VIM.&lt;/li&gt;
  &lt;li&gt;Oh, and &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt; will undo last action, in case you made a mistake!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you’re going to be pretty slow. Evey time you want to move cursor, you will have to think which key you need to press. But it just takes a little getting used to. So you should consciously and consistently spend a little bit of time in VIM. Maybe not in your big coding project, but maybe you need to edit a configuration file. That would be a great opportunity. Take notes in VIM. Soon you will be comfortable with the basics.&lt;/p&gt;

&lt;h2 id=&quot;expanding-your-command-set&quot;&gt;Expanding your command set&lt;/h2&gt;

&lt;p&gt;From there, you can start slowly adding to your repertoire of commands. This is where it starts to get real fun. You’ll start to find moves that are way easier in VIM than with a full IDE.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of moving the cursor one letter at a time, hit &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; to skip forward by a word. &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will skip backward.&lt;/li&gt;
  &lt;li&gt;Replace an entire word instantly by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;cw&lt;/code&gt;. That will delete the word and put you in insert mode.&lt;/li&gt;
  &lt;li&gt;Or, replace three words by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;c3w&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combining commands like this, is where things start to get very cool! When you are editing a file and you think of the perfect key combination to do what you need to do… makes me feel like a martial arts master!&lt;/p&gt;

&lt;p&gt;You will also want to get better at navigating between files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:e&lt;/code&gt; followed by file name let’s you switch to that file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:E&lt;/code&gt; will open the Explorer, which lets you browse through folders to find the file you want to edit.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + o&lt;/code&gt; will instantly switch to the last file you opened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is so much more that you can learn. I am just a few months into using VIM extensively so I am discovering new commands constantly, and I just have tons of fun learning and getting better!&lt;/p&gt;

&lt;h2 id=&quot;start-coding-immediately&quot;&gt;Start coding immediately&lt;/h2&gt;

&lt;p&gt;The other benefit of VIM is that it comes installed in Linux and Mac (In Windows you can get the &lt;a href=&quot;https://www.vim.org/download.php#pc&quot;&gt;gVim&lt;/a&gt;). So even if I am on a new computer, I only need to clone the repo and I am ready to code. Whether I am starting up the computer, or switching between projects, I can start coding so quickly because the only thing I have to open is the CLI.&lt;/p&gt;

&lt;h2 id=&quot;why-not-give-it-a-try&quot;&gt;Why not give it a try?&lt;/h2&gt;

&lt;p&gt;It’s really not as intimidating as some may say, and I think there’s a good chance you will enjoy learning it and boost your coding efficiency like I did. The key is patience.&lt;/p&gt;

&lt;p&gt;I’ll leave you with &lt;a href=&quot;https://www.youtube.com/watch?v=QNAXa0W4OFg&quot;&gt;this video&lt;/a&gt;. This is definitely not me, but it’s amazing what some people can do with it!&lt;/p&gt;</content><author><name></name></author><category term="Featured" /><category term="Coding" /><category term="Vim" /><summary type="html">Why would anyone want to use VIM? The text editor is the place where a web developer spends most of his or her time, and so we definitely want it to be efficient and stress-free. And there are a lot of great options out there, so why would anyone want to choose the most primitive, barebones looking option?</summary></entry><entry><title type="html">A Web Development Setup For $200</title><link href="/web-development/2019/09/27/a-web-development-setup-for-200.html" rel="alternate" type="text/html" title="A Web Development Setup For $200" /><published>2019-09-27T10:03:47+00:00</published><updated>2019-09-27T10:03:47+00:00</updated><id>/web-development/2019/09/27/a-web-development-setup-for-200</id><content type="html" xml:base="/web-development/2019/09/27/a-web-development-setup-for-200.html">&lt;p&gt;What’s the cost of a decent coding computer in 2019? I recently purchased a Samsung Chromebook 3 for around $170, and have been experimenting to see if it can work as my primary web development setup. Will it handle everything that I need to and want to do? What are some drawbacks? Read on to find out.
&lt;!--more--&gt;&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-09-27-a-web-development-setup-for-200/chromebook-open.jpg&quot; alt=&quot;My Chromebook&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;My Samsung Chromebook 3&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;chrome-os&quot;&gt;Chrome OS&lt;/h2&gt;

&lt;p&gt;When you open a Chromebook, there will be a browser and not much else. Any “apps” you will find or be able to add are essentially bookmarks to web apps. For a long time, if you wanted to code there were basically two options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use a cloud IDE such as Cloud9&lt;/li&gt;
  &lt;li&gt;Put the Chromebook in developer mode, and install Linux via Crouton&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The drawback with a cloud IDE is that you cannot work without internet connection. To me that’s a huge negative especially with highly portable devices like Chromebooks. With the Crouton route you can have the full Linux experience, but you are taking some risks by putting the OS into developer mode. But finally, Google has given us (although still in Beta) a much better third option: Project Crostini.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;This native Chrome OS feature which gives you a Linux container to run pretty much any Linux application. But don’t go searching for “Crostini” on your Chromebook because they don’t call it that anywhere within Chrome OS. Instead, open &lt;em&gt;Settings&lt;/em&gt; and search for “Linux”.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-09-27-a-web-development-setup-for-200/linux.png&quot; alt=&quot;Screenshot of Linux setting on a Chromebook&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You will see an option for “Linux (Beta)”. Once you enable the option, it will take a few minutes for initial installation.&lt;/p&gt;

&lt;p&gt;After the installation, go ahead and search for “Terminal”, and open it. …And there it is! You have a Linux Terminal.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-09-27-a-web-development-setup-for-200/terminal.png&quot; alt=&quot;Terminal&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The prompt should say &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;@penguin:&lt;/code&gt;. &lt;em&gt;Penguin&lt;/em&gt;. Yup. That’s the name of the Linux container (Linux logo is a penguin. Get it?). It’s important to note that in this terminal, you are only seeing inside the Linux container, which is running Debian. By default, Linux apps only have access to the files and folders inside the “Linux files” folder.&lt;/p&gt;

&lt;figure class=&quot;figure-img&quot;&gt;
  &lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/posts/2019-09-27-a-web-development-setup-for-200/linux-files.png&quot; alt=&quot;Linux Files Folder&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption class=&quot;figure-img-caption&quot;&gt;&lt;small&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;From here, you are ready to setup your development environment as you would any brand new Linux machine.
Git is installed out of the box, so you are immediately ready to clone your repositories. However neither Ruby nor Node.js comes installed. But they can be added as you would with a standard Linux system.&lt;/p&gt;

&lt;p&gt;What about a text editor? If you use VIM like I do, then you’re already set. However, all the popular editors like VS Code, Atom, Sublime Text can all be installed just as you would with a Linux.&lt;/p&gt;

&lt;p&gt;Anything else you would install on a Linux, go ahead and give it a try on Crostini. So far I have not found any software I use that I cannot install.&lt;/p&gt;

&lt;h2 id=&quot;my-coding-experience&quot;&gt;My Coding Experience&lt;/h2&gt;

&lt;p&gt;First, I want to note that there are a couple of areas where I think Chromebook is &lt;em&gt;superior&lt;/em&gt; than many other traditional laptops. For one, it books and wakes up extremely fast. Secondly, the battery performance is amazing. It can easily last an entire day without ever plugging in!&lt;/p&gt;

&lt;p&gt;All the apps I have tried have worked almost flawlessly. There are a few minor annoyances, such as that some Linux apps can be a bit slow to open, including the terminal. I am not sure if this issue is specific to my Chromebook, or if it is a general issue with all Chromebooks, but it takes maybe around 15 seconds for terminal to open, and similar for Atom. However, GIMP (the image editing app) loads up quickly in a couple of seconds.&lt;/p&gt;

&lt;p&gt;The final thing to note is that the storage size is very limited on a extremely budget-friendly Chromebook like mine, at only 16GB. There are plenty of choices out there for Chromebooks with more storage. However, I did not bother with them because for $30, I can buy a microSD card with 128GB of additional storage. That is way more storage per dollar than paying for a larger internal SSD at the time of buying a Chromebook.&lt;/p&gt;

&lt;p&gt;So really, I have not seen any limitations coding on a Chromebook. You can code offline using Linux apps. These things cost a fraction of a MacBook, they are highly portable and the battery lasts all day. I think this is a game-changer.&lt;/p&gt;</content><author><name></name></author><category term="Coding" /><summary type="html">What’s the cost of a decent coding computer in 2019? I recently purchased a Samsung Chromebook 3 for around $170, and have been experimenting to see if it can work as my primary web development setup. Will it handle everything that I need to and want to do? What are some drawbacks? Read on to find out.</summary></entry></feed>